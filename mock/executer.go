// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_fb_nbackup is a generated GoMock package.
package mock_fb_nbackup

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// Mockexecuter is a mock of executer interface
type Mockexecuter struct {
	ctrl     *gomock.Controller
	recorder *MockexecuterMockRecorder
}

// MockexecuterMockRecorder is the mock recorder for Mockexecuter
type MockexecuterMockRecorder struct {
	mock *Mockexecuter
}

// NewMockexecuter creates a new mock instance
func NewMockexecuter(ctrl *gomock.Controller) *Mockexecuter {
	mock := &Mockexecuter{ctrl: ctrl}
	mock.recorder = &MockexecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockexecuter) EXPECT() *MockexecuterMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *Mockexecuter) Exec(ctx context.Context, commandLine string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commandLine}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockexecuterMockRecorder) Exec(ctx, commandLine interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commandLine}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*Mockexecuter)(nil).Exec), varargs...)
}

// ExecWithWriter mocks base method
func (m *Mockexecuter) ExecWithWriter(ctx context.Context, commandLine string, w io.Writer, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commandLine, w}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithWriter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecWithWriter indicates an expected call of ExecWithWriter
func (mr *MockexecuterMockRecorder) ExecWithWriter(ctx, commandLine, w interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commandLine, w}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithWriter", reflect.TypeOf((*Mockexecuter)(nil).ExecWithWriter), varargs...)
}
